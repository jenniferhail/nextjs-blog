@use '../../../styles/mixins' as m;
@use '../../../styles/typography' as t;
@use '../../../styles/variables' as v;

$IMAGE_RATIO: 1.3;
$BORDER: 10px;

.caption {
  grid-column: span 2;
}

.counter {
  @include t.uppercase-style();

  display: block;
  margin-bottom: 15px;
  padding-right: 30px;
  white-space: nowrap;
}

.image {
  border: $BORDER solid v.$white;
  height: 0;
  // opacity: 0;
  padding-bottom: $IMAGE_RATIO * 100%;
  position: relative;
  width: 100%;

  &:first-of-type {
    grid-column: 2 / span 1;
  }
}

.section {
  display: grid;
  gap: v.$mobile-padding;
  grid-template-columns: 1fr 1fr;
  margin-bottom: v.$bottom;
  padding-top: calc(
    100vh - v.$main-padding - v.$mobile-padding - ($BORDER * 2) -
      (((100vw - (v.$mobile-padding * 3)) / 2) * $IMAGE_RATIO)
  ); // get width of one image & multiply width by height ratio to find image height: ( ( ( 100vw - (45px * 5) ) / 4 ) * $IMAGE_RATIO )

  @include m.breakpoint(v.$md) {
    gap: v.$padding;
    padding-top: calc(
      100vh - v.$main-padding - v.$padding - ($BORDER * 2) -
        (((100vw - (v.$padding * 3)) / 2) * $IMAGE_RATIO)
    );
  }

  @include m.breakpoint(v.$lg) {
    grid-template-columns: 1fr 1fr 1fr 1fr;
    padding-top: calc(
      100vh - v.$main-padding - v.$padding - ($BORDER * 2) -
        (((100vw - (v.$padding * 5)) / 4) * $IMAGE_RATIO)
    );
  }
}
